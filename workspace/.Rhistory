utils:::menuInstallPkgs()
source("C:\Users\josue\Documents\R\win-library\2.13\RcppExamples\R\RcppExamples")
source("C:\\Users\josue\Documents\R\win-library\2.13\RcppExamples\R\RcppExamples")
source("C:\\Users\\josue\\Documents\\R\\win-library\\2.13\\RcppExamples\\R\\RcppExamples")
source("C:\\Users\\josue\\Documents\\R\\win-library\\2.13\\RcppExamples\\R\\RcppExamples")
source("D:\\Comp2011\\TCC Estagio\\workspace\\teste\\bruteforce.R")
source("source("D:\\Comp2011\\TCC Estagio\\workspace\\teste\\bruteforce.R"))
source("C:\\Users\\josue\\Documents\\R\\win-library\\2.13\\RcppClassic\\examples\\RcppClassicExample\\R\\foo.R")
foo()
foo(2)
foo(678)
foo(kjhkj)
foo("nk")
source("C:\\Users\\josue\\Documents\\R\\win-library\\2.13\\Rcpp\\examples\\ConvolveBenchmarks\\exampleRCode.r")
load("Rcpp")
load("Rcpp")
load("Biostrings")
load("Biostring")
library(Rcpp)
Rcpp.package.skeleton(mypackage)
Rcpp.package.skeleton("mypackage")
getwd()
setwd("D:\\Comp2011\\TCC Estagio\\workspace")
package.skeleton("teste")
package.skeleton("babla")
utils:::menuInstallPkgs()
install.packages("RInside", "inline")
utils:::menuInstallPkgs()
install.packages("inline")
install.packages("RInside")
getwd()
library(Rcpp)
cpp_lapply <- cppfunction(signature(x = "list", g = "function" ), 
  'Function fun(g) ;
 List input(x) ;
 List output( input.size() ) ;
 std::transform( input.begin(), input.end(), output.begin(), fun ) ;
 output.names() = input.names() ;
 return output ;
    ')
  ## call cpp_lapply on the iris data with the R function summary
  cpp_lapply( iris, summary )
src <- '
 Rcpp::NumericVector xa(a);
 Rcpp::NumericVector xb(b);
 int n_xa = xa.size(), n_xb = xb.size();
 Rcpp::NumericVector xab(n_xa + n_xb - 1);
 for (int i = 0; i < n_xa; i++)
 for (int j = 0; j < n_xb; j++)
 xab[i + j] += xa[i] * xb[j];
 return xab;
 '
fun <- cxxfunction(signature(a = "numeric", b = "numeric"),
+ src, plugin = "Rcpp")
fun(1:3, 1:4)
library(inline)
library(insine)
src <- '
 Rcpp::NumericVector xa(a);
 Rcpp::NumericVector xb(b);
 int n_xa = xa.size(), n_xb = xb.size();
 Rcpp::NumericVector xab(n_xa + n_xb - 1);
 for (int i = 0; i < n_xa; i++)
 for (int j = 0; j < n_xb; j++)
 xab[i + j] += xa[i] * xb[j];
 return xab;
 '
fun <- cxxfunction(signature(a = "numeric", b = "numeric"),
+ src, plugin = "Rcpp")
fun(1:3, 1:4)
src <- '
 Rcpp::NumericVector xa(a);
 Rcpp::NumericVector xb(b);
 int n_xa = xa.size(), n_xb = xb.size();
 Rcpp::NumericVector xab(n_xa + n_xb - 1);
 for (int i = 0; i < n_xa; i++)
 for (int j = 0; j < n_xb; j++)
 xab[i + j] += xa[i] * xb[j];
 return xab;
 '
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
fun(1:3, 1:4)
fun(1:3, 1:4)
## create a compiled function cpp_lapply using cppfunction 
  cpp_lapply <- cppfunction(signature(x = "list", g = "function" ), 
  'Function fun(g) ;
 List input(x) ;
 List output( input.size() ) ;
 std::transform( input.begin(), input.end(), output.begin(), fun ) ;
 output.names() = input.names() ;
 return output ;
    ')
  ## call cpp_lapply on the iris data with the R function summary
  cpp_lapply( iris, summary )
## create a compiled function cpp_lapply using cppfunction 
cpp_lapply <- cxxfunction(signature(x = "list", g = "function" ), 
'Function fun(g) ;
List input(x) ;
List output( input.size() ) ;
std::transform( input.begin(), input.end(), output.begin(), fun ) ;
output.names() = input.names() ;
return output ;
')
## call cpp_lapply on the iris data with the R function summary
cpp_lapply( iris, summary )
src <- '
 Rcpp::NumericVector xa(a);
 Rcpp::NumericVector xb(b);
 int n_xa = xa.size(), n_xb = xb.size();
 Rcpp::NumericVector xab(n_xa + n_xb - 1);
 for (int i = 0; i < n_xa; i++)
 for (int j = 0; j < n_xb; j++)
 xab[i + j] += xa[i] * xb[j];
 return xab;
 '
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
src <- '
 Rcpp::NumericVector xa(a);
 Rcpp::NumericVector xb(b);
 int n_xa = xa.size(), n_xb = xb.size();
 Rcpp::NumericVector xab(n_xa + n_xb - 1);
 for (int i = 0; i < n_xa; i++)
 for (int j = 0; j < n_xb; j++)
 xab[i + j] += xa[i] * xb[j];
 return xab;
 '
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
fun <- cxxfunction(signature(a = "numeric", b = "numeric"), src, plugin = "Rcpp")
